# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - http # Remove if your API doesn't support HTTP
host: example.com # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /api/v1 # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is an **example** API to demontstrate features of OpenAPI specification
    # Introduction
    This specification is intended to to be a good starting point for describint your API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).
    It also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and 
    [ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond the standard OpenAPI syntax we use a few 
    [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).
    
    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.

  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Nomad Total Command # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS
  contact:
    email: josh.rathke@nomadgcs.com # [Optional] Replace with your contact email
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'

externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
produces:
  - application/json
  # you can add any mime type your API produces to the list
consumes:
  - application/json
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Command Modules
    description: Command Module Endpoints
  - name: Echo
    description: Example echo operations
  - name: Interface Modules
    description: Interface Module Endpoints
  - name: Logs
    description: Log Endpoints
  - name: Monitor Modules
    description: Monitor Module Endpoints
x-tagGroups:
  - name: Interface Module Endpoints
    tags:
      - Interface Modules
      - Command Modules
      - Monitor Modules
  - name: Control System Endpoints
    tags:
      - Echo
  - name: Logging Endpoints
    tags:
      - Logs

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/interface-modules/command-modules/{commandModuleID}':
    parameters:
      - in: path
        name: commandModuleID
        description: ID of the Target Command Module
        required: true
        type: string
    get:
      tags:
        - Command Modules
      summary: GET Command Module
      description: Get a Command Module by the Command Module ID.
      operationId: getCommandModuleByID
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CommandModule'
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Server Error
  '/interface-modules/command-modules/':
    parameters:
      - in: query
        name: commandModuleID
        description: ID of the targeted Command Module.
        type: string
      - in: query
        name: commandModuleSlugs
        description: Slugs of the targeted Command Modules.
        type: string
      - in: query
        name: commandNodeCompatible
        description: Whether the targeted Command Modules are Command Node Compatible.
        type: boolean
    get:
      tags:
        - Command Modules
      summary: GET Command Modules
      description: Get Command Modules that match the provided query.
      operationId: getCommandModules
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/CommandModule'
        '403':
          description: Forbidden
        '500':
          description: Server Error

  # Get Monitor Module
  '/interface-modules/monitor-modules/{monitorModuleID}':
    parameters:
      - in: path
        name: monitorModuleID
        description: ID of the targeted Monitor Module.
        required: true
        type: string
    get:
      tags:
        - Monitor Modules
      summary: GET Monitor Module
      description: Get a Monitor Module by the Monitor Module ID.
      operationId: getMonitorModule
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MonitorModule'
        '403':
          description: Forbidden
        '500':
          description: Server Error

  # Get Monitor Modules        
  '/interface-modules/monitor-modules/':
    parameters:
      - in: query
        name: monitorModuleID
        description: ID of the targeted Monitor Module.
        type: string
      - in: query
        name: monitorModuleSlugs
        description: Slugs of the targeted Monitor Modules.
        type: string
      - in: query
        name: commandNodeCompatible
        description: Whether the targeted Monitor Modules are Command Node Compatible.
        type: boolean
    get:
      tags:
        - Monitor Modules
      summary: GET Monitor Modules
      description: Get Monitor Modules that match the provided query.
      operationId: getMonitorModules
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/MonitorModule'
        '403':
          description: Forbidden
        '500':
          description: Server Error

  '/logs':
    parameters:
      - in: query
        name: logID
        description: ID of the targeted Log.
        type: string
    get:
      tags:
        - Logs
      summary: GET Logs
      description: Get Logs that match the provided query.
      operationId: getLogs
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Log'
        '500':
          description: Server Error

# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:

  # COMMAND MODULE ENTITY
  CommandModule:
    type: object
    properties:
      commandModuleID:
        description: ID of the Command Module.
        type: string
        example: '167e8bd3-7de9-4138-908c-2bf07facf8dc'
      commandModuleName:
        description: Name of the Command Module.
        type: string
        example: Intelligent Routing
      commandModuleSlug:
        description: Slug of the Command Module.
        type: string
        example: INTELLIGENT_ROUTING
      commandModuleEnabled:
        description: Whether or not the Command Module is enabled.
        type: boolean
        example: true
      commandModuleComponent:
        description: Angular Component name of the Command Module.
        type: string
        example: IntelligentRoutingCommandModuleComponent
      commandNodeCompatible:
        description: Whether or not the Command Module is Command Node Compatible.
        type: boolean
        example: true
      commandLockEligible:
        description: Whether or not the Command Module is Eligible for Command Lock.
        type: boolean
        example: true
      featureSetID:
        description: The ID of the Feature Set that the Command Module belongs to.
        type: string
        example: c5fae649-5fc0-4a60-82a9-93bc4955f354
      createdAt:
        description: The Timestamp of the creation of the Command Module.
        type: string
        example: '2018-02-13 15:31:57.758'
      updatedAt:
        description: The Timestamp of the last update to the Command Module.
        type: string
        example: '2018-02-13 15:31:57.758'

  # MONITOR MODULE ENTITY
  MonitorModule:
    type: object
    properties:
      monitorModuleID:
        description: ID of the Monitor Module.
        type: string
        example: '167e8bd3-7de9-4138-908c-2bf07facf8dc'
      monitorModuleName:
        description: Name of the Monitor Module.
        type: string
        example: Intelligent Routing
      monitorModuleSlug:
        description: Slug of the Monitor Module.
        type: string
        example: WAN_CAPACITY
      monitorModuleEnabled:
        description: Whether or not the Monitor Module is enabled.
        type: boolean
        example: true
      monitorModuleComponent:
        description: Angular Component name of the Monitor Module.
        type: string
        example: WANCapacityMonitorModuleComponent
      commandNodeCompatible:
        description: Whether or not the Monitor Module is Monitor Node Compatible.
        type: boolean
        example: true
      commandLockEligible:
        description: Whether or not the Monitor Module is Eligible for Monitor Lock.
        type: boolean
        example: true
      featureSetID:
        description: The ID of the Feature Set that the Monitor Module belongs to.
        type: string
        example: c5fae649-5fc0-4a60-82a9-93bc4955f354
      createdAt:
        description: The Timestamp of the creation of the Monitor Module.
        type: string
        example: '2018-02-13 15:31:57.758'
      updatedAt:
        description: The Timestamp of the last update to the Monitor Module.
        type: string
        example: '2018-02-13 15:31:57.758'

  # LOGS ENTITY
  Log:
    type: object
    properties:
      logID:
        description: ID of the Log.
        type: string,
        example: '5d62ea24-a787-45f4-840a-9696d9a2010e'
      logActorType:
        description: Actor Type of the Log.
        type: string,
        example: web-client